{"abi":[],"bytecode":{"object":"0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220442c13cd323f0c0a27b350a1bf8b054eb94fa0d509d2eda8f554e7ff5b063faf64736f6c634300081c0033","sourceMap":"189:9928:9:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:9928:9;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x730000000000000000000000000000000000000000301460806040525f5ffdfea2646970667358221220442c13cd323f0c0a27b350a1bf8b054eb94fa0d509d2eda8f554e7ff5b063faf64736f6c634300081c0033","sourceMap":"189:9928:9:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"author\":\"Gnosis Developers\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"BALANCE_ERC20\":{\"details\":\"The TokenBalance marker value for using direct ERC20 balances for computing the order struct hash. This value is pre-computed from the following expression: ``` keccak256(\\\"erc20\\\") ```\"},\"BALANCE_EXTERNAL\":{\"details\":\"The TokenBalance marker value for using Balancer Vault external balances (in order to re-use Vault ERC20 approvals) for computing the order struct hash. This value is pre-computed from the following expression: ``` keccak256(\\\"external\\\") ```\"},\"BALANCE_INTERNAL\":{\"details\":\"The TokenBalance marker value for using Balancer Vault internal balances for computing the order struct hash. This value is pre-computed from the following expression: ``` keccak256(\\\"internal\\\") ```\"},\"KIND_BUY\":{\"details\":\"The OrderKind marker value for a buy order for computing the order struct hash. This value is pre-computed from the following expression: ``` keccak256(\\\"buy\\\") ```\"},\"KIND_SELL\":{\"details\":\"The marker value for a sell order for computing the order struct hash. This allows the EIP-712 compatible wallets to display a descriptive string for the order kind (instead of 0 or 1). This value is pre-computed from the following expression: ``` keccak256(\\\"sell\\\") ```\"},\"RECEIVER_SAME_AS_OWNER\":{\"details\":\"Marker address used to indicate that the receiver of the trade proceeds should the owner of the order. This is chosen to be `address(0)` for gas efficiency as it is expected to be the most common case.\"},\"TYPE_HASH\":{\"details\":\"The order EIP-712 type hash for the [`GPv2Order.Data`] struct. This value is pre-computed from the following expression: ``` keccak256(     \\\"Order(\\\" +         \\\"address sellToken,\\\" +         \\\"address buyToken,\\\" +         \\\"address receiver,\\\" +         \\\"uint256 sellAmount,\\\" +         \\\"uint256 buyAmount,\\\" +         \\\"uint32 validTo,\\\" +         \\\"bytes32 appData,\\\" +         \\\"uint256 feeAmount,\\\" +         \\\"string kind,\\\" +         \\\"bool partiallyFillable,\\\" +         \\\"string sellTokenBalance,\\\" +         \\\"string buyTokenBalance\\\" +     \\\")\\\" ) ```\"},\"UID_LENGTH\":{\"details\":\"The byte length of an order unique identifier.\"}},\"title\":\"Gnosis Protocol v2 Order Library\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/GPv2Order.sol\":\"GPv2Order\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[\":@hyperlane-xyz/=node_modules/@hyperlane-xyz/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":canonical-weth/=node_modules/canonical-weth/\",\":forge-std/=lib/forge-std/src/\",\":hardhat-deploy/=node_modules/hardhat-deploy/\",\":hardhat/=node_modules/hardhat/\"]},\"sources\":{\"contracts/interfaces/IERC20.sol\":{\"keccak256\":\"0x382ca2eaa2c5cbd55b4656509b3d6e686f8afb2d6da4194cf142f4f026b86d50\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://25ddbf624e13ca18479b14adba3e7472e365cc2c0ea9c0790487401daeb4bff0\",\"dweb:/ipfs/QmYF6mAKYTegWUG3LGNHhquWibuyFBxzVBEG7TJAUCDSDN\"]},\"contracts/libraries/GPv2Order.sol\":{\"keccak256\":\"0xb96efb76433446cf0ccb9f5bc926301a9c8bcbfd17dcd6a36a1e6207f5b436b2\",\"license\":\"LGPL-3.0-or-later\",\"urls\":[\"bzz-raw://5ec097e17d3e47e16808a5246a99af7ef618bb58ccb61d7331bfca1929cbbd82\",\"dweb:/ipfs/QmbH7rg5s5gdpa5KENMUXHyGBWJyQn6XEwv9JakRSCcv8n\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@hyperlane-xyz/=node_modules/@hyperlane-xyz/","@openzeppelin/=node_modules/@openzeppelin/","canonical-weth/=node_modules/canonical-weth/","forge-std/=lib/forge-std/src/","hardhat-deploy/=node_modules/hardhat-deploy/","hardhat/=node_modules/hardhat/"],"optimizer":{"enabled":true,"runs":1},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"contracts/libraries/GPv2Order.sol":"GPv2Order"},"evmVersion":"cancun","libraries":{}},"sources":{"contracts/interfaces/IERC20.sol":{"keccak256":"0x382ca2eaa2c5cbd55b4656509b3d6e686f8afb2d6da4194cf142f4f026b86d50","urls":["bzz-raw://25ddbf624e13ca18479b14adba3e7472e365cc2c0ea9c0790487401daeb4bff0","dweb:/ipfs/QmYF6mAKYTegWUG3LGNHhquWibuyFBxzVBEG7TJAUCDSDN"],"license":"MIT"},"contracts/libraries/GPv2Order.sol":{"keccak256":"0xb96efb76433446cf0ccb9f5bc926301a9c8bcbfd17dcd6a36a1e6207f5b436b2","urls":["bzz-raw://5ec097e17d3e47e16808a5246a99af7ef618bb58ccb61d7331bfca1929cbbd82","dweb:/ipfs/QmbH7rg5s5gdpa5KENMUXHyGBWJyQn6XEwv9JakRSCcv8n"],"license":"LGPL-3.0-or-later"}},"version":1},"id":9}